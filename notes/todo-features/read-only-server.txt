
cyber-dojo hub/index
--------------------
o) "Proper" rails app.
o) katas on cyber-dojo.org timeout
   they cannot be [test]ed once timed out
   they xfer to the hub once timed out
   OR
   create an id->id map?
o) users that login via Twitter/Google/Facebook
o) up vote for katas by id
o) prizes for *user* who votes the most
o) ability to fork - I think this means the cyberdojo you are
   voting for needs to know its image_name (for docker-container)
   and URL of server that can host the fork.
o)



- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
timed-out katas
  the more I think about it the more I realize that having
  dojos non-resumable after 2 hours from the first traffic-light
  is a good idea. It also ties in with the idea of making a
  second read-only server. It may help to solve language
  rename awkwardness a little too.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

o) add buttons on cyber-dojo to publish a dojo to the hub with tags
   on the sending server check format of dojo
   if its old-rb format then convert it *in-place* (on sending server) using script above
   send it in new-json format (tar.gz) to the hub

o) can offer fork on the hub if I know URL of originating dojo
   can make with $.getJSON('forker/fork'...) to it

o) this means we could get a cycle
  I publish a dojo
  Someone else links back to my dojo and adds some more traffic-lights
  Suppose they then *re*publish it!
  That should be allowed. It would be cool!
  Does create issues.
  Can't assume that inserted database information will be new
  Could be information that already exists.
  Re-publish event could add new tags.
  Tags should be recorded with the publish-event not the dojo.
  Can then see a history of "tags" added.
  Allow tags to be editable on the hub?
  Want re-publish of unchanged dojo to be low-overhead
  Should be enough to check, URL,id,animals,traffic-lights per animal.

o) another problem is it opens up the possibility of
   two people trying to edit the same code at the same time
   as the same animal.
   This implies that if you click from the hub to get back to
   the original dojo you should not go back to the original.
   You should never see the original's ID. Instead you should
   auto-fork and thus get a new ID. Sharing the new ID it is now your decision.
   This is great but it means it will require database+code using sha1's to
   figure out which old traffic-light the new dojo was forked from.
   New dojo will not be tied to old dojo until new dojo is published back
   onto the hub

o) dojos that have had their language name changed cannot be forked.
   Need to fix this.
   Or at least detect it and either
      not publish them on the hub
      or figure out what the new name is and patch
   Do patching on the old->new conversion?
   No since there could still be post publish name changes.

o) be careful not to expose the ids of the original dojos
   when viewing diffs on the hub
   Create a simple fake-id->id mapping table.

o) if traffic-light's files' hashes match traffic-light 1 for
   other dojo(s) then those other dojos were forked from this
   traffic-light. Could simply offer a count of this on dashboard/diff
   Or simpler, a mark which can reveal information about the forks.
   if traffic-light's files' hashes match other traffic-lights for
   this dojo then reverts have occured.

o) get domain name for hub



------------------------------------------------------
Suppose in dojo-X the frog forked from traffic-light 28
whose git hash was 2d0d2bb21ad7....
In the new dojo-Y the alligators first traffic-light will *not*
have the same hash because a git hash depends not only on the
content but on the history and date/time etc.
Even if it didn't depend on the history the content is not
exactly the same. This is because..
  o) the output file usually contains timing info.
  o) the output file's content is also in manifest.rb (which is git commited)
  o) increments.rb contains a date-time-stamp of each test
- - - - - - - - - - - - - -
However, I could create a separate sha1 hash of the "genuine" files.
Where genuine files are visible_files - [output]
Then the hash of dojo-X frog 28 would be the same as dojo-Y alligator 1
This would allow me to store these hashes in a database table and to
be able to know when any file's content has occured before (either through
a fork or coincidentally).
So a database table would need to be something like
  CREATE TABLE digests (
    sha1 CHAR(40) NOT NULL,         # '8b45e4bd1c6acb88bebf6407d16205f567e62a3e'
    id CHAR(10) NOT NULL,           # '7D2111A7D0'
    animal VARCHAR(32) NOT NULL,    # 'hippo'
    light INT,                      # 14'th traffic-light
    filename VARCHAR(127) NOT NULL, # 'fizz_buzz.hpp'
    CONSTRAINT pk PRIMARY KEY (id,animal,light,filename)
  )
  CREATE INDEX sha1_index ON digests (sha1)
- - - - -
This could also give me a way to catalogue all the initial starting positions.
This is useful since some exercises have changed their names and this causes
problems with forking.
- - - - - - - - - - - - - - - -
For the hashing I could use
  require 'digest/sha1'
  Digest::SHA1.hexdigest("some string") -> "8b45e4bd1c6acb88bebf6407d16205f567e62a3e"
  Would need a test to make sure the sha1 of a known string did not change (eg when
  upgrading Rails or Ruby)
------------------------------------------------------
o) Copy all cyber-dojo.com dojos to new read-only server
o) Do the conversion on read-only server (so as not to drain cpu on main server)
   and ensure everything is saved in json format.
o) Forward review ids from cyber-dojo.com to read-only server...?
   On read-only server have json method 'dojo/valid_id'
   On cyber-dojo.com call this (in javascript) and if id exists
   then open a dashboard on the readonly server. Otherwise see if
   the id is on cyber-dojo.com (and if it is open dashboard there).
   This means the start/resume buttons should only be enabled if the
   id is valid on cyber-dojo.com
   The review button should be enabled if the id is valid on
   either cyber-dojo.com or the readonly server.
   Thus ids for harvested dojos (whose id is *only* on the readonly server)
   will only enable the review button.
o) Delete all old eval saved dojos from cyber-dojo.com
o) Use pure json save/read on cyber-dojo.com
A lot of work, but the result is no evals on the read-only server.
------------------------------------------------------

 o) on cyber-katas.com
 o)   harvest dojos from cyber-dojo.com
 o)   write script to convert them to JSON
 o)   create database
 o)   write script to parse JSON'd dojos and populate database
 o)   create index page which feeds off database
 o)   verify dashboard and diff-dialog works ok
 o)   use git branch for this work
 o)   only problem is harvested dojos still need initial evals
 o)   that's why second part of the work is...

 o) on cyber-dojo.com
 o)   support inspect on old dojos
 o)   but use JSON on new dojos
 o)     ***can I do this***?
 o)     languages?
 o)     exercises?
 o)     forking?
 o)     resuming?
 o)   install
 o)   harvest all dojos to cyber-katas
 o)   convert them to JSON on cyber-katas as above
 o)   forward [review]s to cyber-katas (not button on test page?)


------------------------------------------------------

READONLY PRACTICE VIEW WITH VOTING
  Start to think about opening up the done katas so people
  can see them and vote on them.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
