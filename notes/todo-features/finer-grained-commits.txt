
Finer-grained commits
=====================

  Plan
  ----
  1) done
  2) done
  3) done
  4) separate traffic-light index from tag-numbers
     when fine-grained commits are in place tagGap will not be 1
     or rather it will be 1 but in the index.
     I think I will need two indexes, was and now
        was_index = now_index - 1
        data.lights[was_index].tag_number
        data.lights[now_index].tag_number
     This suggests I don't need was_index at all.
     Means the diff is always 1.
     This should work for both cases, when lights are only
     the lights and also when lights are finer-grained tags too.

     When indexes are used will I need maxTag
     Won't this just be the length of the tags[] returned by ajax
     Will this also mean that if a new traffic-light is added
     then refresh() will see it?

     Will I need to modify  the [test] and [dashboard] pages
     traffic-light handlers?

  5) custom serialization only POSTs changed files for [test] event.

  6) drop the form

  7) POST for each file new/rename/delete/edit
     In increments.json a non-test increment
     has colour=white and extra key for its type
     Traffic-light retain current numbering, viz
     15th tag may be 6th traffic-lights so 6 displays
     in tag-control. But increment[:number] stays the
     same and is for the tag.
     So Light.number is calculated
        Light.tag.number is stored in increments.json

  8) decide on icon(s) for each fine-grained commit.
     one for everything?
     one each for file new/rename/delete/edit
     how about just a small N,R,D,E
     put checkbox icon for tags? between << < > >>
     this only appears if there are inter-test tags
     traffic-lights at top show tags and lights if tags? is checked.
     If tags are being shown then numbering switches to tag numbers.

     NB: suppose the lion clicks [new file]
     The server has to do a git add <filename>
     However the server *also* has to update the
     lion's manifest.json file. This is because the
     manifest.json file is what is read when the browser does
     a refresh. So only when the git add <filename> and the
     manifest.json has been updated, does a success response
     come back to the browser and it then creates the new file
     in the file-knave

  9) make was-tag and now-tag draggable.
     both are constrained and can only move horizontally.
     they are always locked with a delta of 1.
     Viz was-tag+1==now-tag and they drag together.

  10) add checkbox for tags? to dashboard
      if tags? is checked dashboard shows tags as well
      as traffic-lights

  Note: Code for whether/when an animal appears on the dashboard
  may need revisiting when dashboard shows tags as well as lights.

  ==============================================


  do a commit (on server) when an animal switches from one file
  to another file (and there is a change in the file switched from),
  or creates a new file, or renames a file, or deletes a file.
  This will allow you to see if the first code
  entered was code or test code. And also file navigation.
  And also, sometimes, code that was entered and then deleted
  before being tested.

  These calls need to be synchronous I think.
  Making them synchrononus helps to keep the code simple.
  If it creates responsiveness issues it is a signal to
  address scalability.

  o) do the update on the browser (eg file rename)
  o) switch to wait cursor (for whole page,not just button)
  o) put up hatched jQuery like page background?
  o) do ajax call
  o) remove hatched background, restore cursor (always)
  o) if it fails
  o)     undo the change
  o)     open small modal popup saying there was an error


  history diff navigator
  ----------------------
  currently its << < > >> and this is for traffic-lights.
  Once fine-grained commits are in place the was-tag and now-tag
  for successive traffic-lights may not have successive tags.
  Eg was-tag=23  now-tag=27  could mean there were 4 fine-grained
  commits between the test-tag-23 and the test-tag-27, which were,
  respectively, the test-tags for traffic-lights 5 and 6.

  So, suppose was-tag,now-tag are N and N+X, for lights W,N
  Then if N=W+1 and X!=1 detecs a fine-grained commit.
  In this case
  o) don't display N,N+X as the was-tag and now-tag in the
     edit controls. Instead display W,N.
     This way the was-tag and now-tags always display
     the traffic-light number.
  o) display a *new* fine-grained-commit control
     which allows you to move through the X commits between
     W and N.
  o) maybe always display this extra control but it's < >
     controls are disabled if X==1

  The navigate control could have the light/tag toggle in its center.
    << < [:] > >>
  where [:] indicates two options
     o) everything
     o) just lights


  serialization
  -------------
  Also need to change the serialization so it only
  serializes the current single change.
  This should be easy to do based on the file-hashes.


  diff-visualization
  ------------------
  On replaying a < > diff how will I visualize that the diff
  is a new file?
  is a renamed file?
  is a deleted file?


  interesting
  -----------
  If the most recently edited file was test code is the chance
  of a non-amber higher than if it was non-test code?


  fine-grained commit tags
  ------------------------
  Code currently does this...

    def tags
      # one tag for initial start_avatar
      # + one tag for each light. See comment below.
      (0..increments.length).map{ |n| Tag.new(self,n,git) }
    end

    def lights
      increments.map { |inc| Light.new(self,inc) }
    end

  What is inside the increments.json file?
  Each entry currently looks like this...
  {"colour":"red","time":[2014,8,27,5,49,5],"number":1}
  How about putting a colour:white entry for tags that
  are not traffic-lights? The tags stays the same and
  lights would have to select the tags that are not white.
  Also storing "number" as the traffic-light number?

    def lights
      increments.select{|inc|
        inc['colour'] != 'white'
      }.map { |inc|
        Light.new(self,inc)
      }
    end



  show sequence of lights
  -----------------------
  To match the sequence of lights on test and dashboard pages.
  Suppose I have a separate display of the lights.
  It could display at most previous 3 and future 3 lights (say).
  So you can see
    R A G G R R R
  and a cursor either points at one of these lights
    R A G G R R R
        ^15
  or at the gap between two lights.
    R A G G R R R
         ^15
  This is interesting. It suggests the idea of showing all the
  tags, including ones for a non-test edit. I could do this on
  the dashboard too.

    R A wwww G ww G www R ww R www R
         ^
         15

  Why not use that to indicate the was-now tags?
  If you are looking at lights it shows
  R A wwww G ww G www R ww R www R
           ^    ^
  If you are looking at tags it shows
  R A wwww G ww G www R ww R www R
           ^ ^
  That way the text-edits for the was-tag and now-tag
  are no longer displayed next to the traffic-lights.
  So they can do double duty and show either light-tags
  or inter-light-tags.
  And all I need is a control to select whether you want
  the tags to work on lights or between-lights,
  test-events, or between-test-events.
  The sequence of lights (and inter test event markers)
  can go along the title bar, after [image]history

  This raises the option of making the ^ tags controls
  in their own right and draggable.
  This could remove the need for editable tags.

  if you are in light-mode the ^ control shows the light number?

  R A wwww G ww G www R ww R www R
           ^    ^
           3    4

  if you are in tag-mode the ^ control shows the tag number?

  R A wwww G ww G www R ww R www R
           ^ ^
           7 8

  This also gives a way to control the tag-gap.
  There could be a small 'chain-link' between the two controls.
  If this is [on] the controls are tied-together, and if you drag one
  the other drags too. If the controls are [off] the controls
  not tied-together, and if you drag one the other does not drag.


  no-diff!
  --------
  what about when was-tag == now-tag which is used to show a no-diff
  view of the current code...
  I think this is ok. If the chained control is [off] then
  the two controls can be moved independently. This means they
  could be on the same light/tag.
  perhaps display like this?
                4
                ^
  R A wwww G ww G www R ww R www R
                ^
                4

  Don't like that. Takes up too much vertical space. How about.
  R A wwww G ww G www R ww R www R
                ^
               4|4

  Where will the tied-together control go?
  Perhaps on both?  To left of was-tag, to right of now-tag
  R A wwww G ww G www R ww R www R
                ^
              o4|4o

  R A wwww G ww G www R ww R www R
                ^     ^
               o4     5o

  I think this will involve a lot of custom jQuery dragging and dropping.
  Can two draggables be linked together?
  It appears yes...
  http://stackoverflow.com/questions/1997454/is-it-possible-to-link-two-jquery-ui-draggables-together

  Simpler idea. Just make the was-tag control have a checkbox to
  indicate whether it is "live". If it is not live then you get
  a no-diff (from the now-tag). If it is live, you get a diff
  from (was-tag <-> now-tag). This means was-tag != now-tag

  This means



  revert/fork?
  ------------
  Allow forking from a light or a tag? Light only I think.
  This helps to avoid the problem where you accidentally fork
  from a tag which is a few edits after a test. That will display
  as a between-test-event and not be forkable from.
  Or revertable to.
  Where will the fork/revert buttons go?
  I'd like them to be off the body of the dialog so the body
  has just the << < > >> controls and the filenames.
  Note that Revert/Fork both close the dialog.
  This suggests it should be a big button next to [close]
  at the bottom.
  So it could be something as simple as
  [close] [revert to TL 9]  [fork from TL 9]
  where TL is an image of a rag traggic-light


  ==========================================================
  SCRATCH...

  Add a third inner control for between-light tags
  <<| <| < > |> |>>
  If there is no tag between lights then the innermost < >
  controls will be disabled.
  So if
      was-tag = 23  (red)
      now-tag = 31  (green)
    and there are 8 'micro' tags between those traffic-lights
    then clicking > micro control will change to
      was-tag = 31
      now-tag = 32
    or clicking < micro control will change to
      was-tag = 30
      now-tag = 31
  ...
  What about backward compatibility?
  Will the light/tag distinction collapse silently
  for reviewing dojos done before the tag-commits?
  ...
  Reduce size of tag input-edits. The most common navigation
  by far is using the << < > >> buttons.

  what counts as a tag?
  ---------------------
  If you move from one file to another but no content
  has changed then this will *not* be stored as a tag on
  the server.

  If you hit test again, this will result in a new tag (same as now).

  dashboard-visualization
  -----------------------
  The dashboard could also show two numbers, the big one (number
  of lights) and a small one (number of tags).
       11 (pie) [lion] 92


  Suppose you edit a file and then press [test].
  I want this as one tag. From the devs point of view it is
  a single action. Also, it means you can easily tell
  if they pressed test and there were no diffs since
  that is the only way you'll get a diff where the only
  file that changes is the output file.

      o) new file
         $.ajax({
           url: new_file,
           dataType: 'json',
           async: false,
           data: { filename:filename, id:id, avatar:name }, // tag? I think no
           before: function() {
             //set cursor to wait
             //add transparent overlay?
           },
           success: function() {
             //update incoming file-hashes
           },
           error: function() {
             //revert the change
             //revert the file-hashes
             //write message to output/popup
           },
           complete: function() {
             //remove transparent overlay
             //set cursor back
           });

      o) deleted file
           very similar but for deleted file
            do I need to record which file is the one shown
            after the delete? Can't choose instructions as
            some katas may not have an instructions file.
            Only guaranteed files are cyber-dojo.sh
            and output. Both boring.
            Simplest is to pick the next one in the filenames
            list. Or one with 'test' in its name?

      o) renamed file = old-name new-name
           very similar, was-filename, now-filename
           will result in $git mv
           on the server.


  How to store the finer-grained increments on the server?
  Adapt existing?
  Add reason property which defaults to :test
  New non-test commits can have their own reason, with specific data related to the reason.
  New non-test commits can all have white traffic-light
  Existing << < > >> navigation moves through non-white traffic-lights.

  Possible design of new << < > >> navigator
  Add third type of < > button.
  One whose triangle is not filled in.
  This would move one tag-commit event. Above this would still be
  the editable tag numbers and the lights
   This suggests putting the < > buttons underneath the tags
   (which they work on) and the the <| |> buttons underneath
   the lights (which they work on)
   Move animal image. Repeat count and pie chart from dashboard.
   Add tag-commit count.
       11 (pie) [lion] 92
            light |tag| |tag| light
        <<||   <|    <   >    |>    ||>
   Also add tag-number to each light.
       11 (pie) [lion] 92
        tag-light |tag| |tag| light-tag
        <<||   <|    <   >    |>    ||>


  This raises the idea of *not* trying to open the
  'most changed file' when you navigate. Instead
  open the file that was the one switched to. This is
  simpler and perhaps more in keeping with the review aspect.
  It means the file could be cyber-dojo.sh or output.
  It also suggests recording the scroll-position of the
  file when it is re-played. This allows you to see
  exactly what the player saw when they switched to that file.
  Could even save scrollbar movements.
  Could of course save character by character edits!
  Or do a tag-commit if there hasn't been one for 1 minute.
  Or do a tag-commit if the diff amount gets beyond a threshold.

-----------------------------



Then I need to look at diff-control moving forward/backward
one traffic-light since it will not longer be a straight +1 -1.
The +1 -1 movement currently in place will become the movement
for the individual tags. I will need to add code and buttons
for traffic-light movement.
If traffic-light tags are sequential it means there are no
fine-grained commits and the fine-grained commits can be
disabled.
The tag numbers displayed currently are traffic-light numbers.
In the new scheme will these be traffic-light numbers or
will they be tag numbers?
I think they should be traffic-light numbers.
Display stays basically the same as now.
But there are extra < > buttons for fine-grained commits
between two traffic-lights if they exist.
Hmmm. But what is the initial display?
Suppose it is off tag 0 to tag 1 (white to red say)
There are no fine-grained commits inside those
so < > fine grained controls are disabled.
So you click >> to move to next traffic-light.
Now you see tag 1 to tag 8 because there are 7
fine-grained commits and the < > fine-grained commit controls
are enabled. Or rather only the > fine-grained commit control
is enabled? So what happens if you click >
Does the display switch to tag-1 vs tag-2
Feels clumsy.
Suppose the default is tag movement not light movement.
Feels good in terms of cyber-dojo aim of maximizing feedback.
So perhaps there is now just the << < > >> controls as there is now.
< > move single tags. To move traffic-lights there is a different
control? What lights are displayed when you are moving through tags?
Only really makes sense to display the was-traffic-light...
Hmmm. Why do I offer forwards and backwards navigation
symmetrically? Why not have start, move forward, or go back to
beginning again style controls. And single tag-number.
You can move forward from that tag by one traffic-light or by
one fine-grained tag. This also simplifies the fork/revert
button since there is only ever one tag number and traffic-light
displayed. This also means the tag-number + light can go in the
middle of the << <| < > |> >> controls.
And fork/revert buttons could go to bottom as large buttons?

Presumably the fork/revert buttons should only be enabled
if the current tag corresponds to a traffic-light?

So if tag-number displayed is (say) 23
then what is being displayed? Presumably 22-23 tag diff.
So perhaps the single tag control should contain two numbers
after all. Or maybe two but only one is editable.
Viz simplify the control so the tag-gap is always 1.

Getting complicated. Thinking maybe I should have toggle.
If there are fine-grained commits then you get the
option to move (via a separate control) between these
and the main traffic-lights retain the current display.

How about everything stays the same, but
if there are fine-grained commits between
was-tag and now-tag (which are 1 apart)
then fine-grained < > tags are enabled
which, when you click then, do not change
the was-tag and now-tag. Viz the tags retain
their current meaning as traffic-light
numbers.

Back to symmetry.
Why not have non << button to rewind to start.
Then just have > >> buttons.
Or > |> >> buttons including fine-grained.

How about traffic-light is *not* shown when we are on
a fine-grained commit. Like that.

I could show 2-3
and then the fine-grained commits are
done as fractions between 2 and 3, viz
1/4 (4-5),
2/4,(5-6)
3/4,(6-7)
4/4,(7-8)

There is a tension between showing the traffic-lights
are 2-3 (and not their tag numbers) and the ability
to select and two tags to diff between.

How about 4 tag-numbers being displayed
2-3 which are traffic-lights
and also
4-8 which are fine-grained commits meaning
there were 4 commits between lights 2 and 3.
Or...
Have just 4-8 are the (editable) tags
and the traffic-lights that are displayed
are calculated from 4 and 8 (as 2 3)
but the 2 and 3 are not editable.

So  2 == (4)-(5) <  3


Here's a completely different idea. For lights 2-3 suppose
the filenames show
2 3 Wibble.java
0 0 instructions
4 5 WibbleTest.java
0 0 cyber-dojo.sh
Simply have numbers indicating the order
the files were edited in. Viz

2 3 Wibble.java  1,3
0 0 instructions
4 5 WibbleTest.java  2,4
0 0 cyber-dojo.sh

which indicates that Wibble.java was edited first,
then WibbleTest.java second etc. This is what I really want.
Now if you click the 1 on
2 3 Wibble.java  1,3
it will show you the diff of that file.

Display could be done like this... better since horizontal == time
Wibble.java      1   3 ....
WibbleTest.java    2   4 ......
